generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  role             String
  name             String
  email            String             @unique
  password         String
  new              String             @default("true")
  phone            String?
  profilePicture   String?            @map("profile_picture")
  createdAt        DateTime           @default(now()) @map("created_at")
  exerciseTracking ExerciseTracking[]
  plans            Plan[]
  sentInvitations  UserInvitation[]

  @@map("users")
}

model Plan {
  id          String        @id @default(uuid())
  userId      String        @map("user_id")
  title       String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  sessions    PlanSession[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plans")
}

model PlanSession {
  id            String         @id @default(uuid())
  planId        String         @map("plan_id")
  sessionNumber Int            @map("session_number")
  name          String
  completed     Boolean        @default(false)
  createdAt     DateTime       @default(now()) @map("created_at")
  plan          Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  blocks        SessionBlock[]

  @@map("plan_sessions")
}

model SessionBlock {
  id        String          @id @default(uuid())
  sessionId String          @map("session_id")
  title     String
  position  Int
  createdAt DateTime        @default(now()) @map("created_at")
  exercises BlockExercise[]
  session   PlanSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_blocks")
}

model BlockExercise {
  id           String             @id @default(uuid())
  blockId      String             @map("block_id")
  exerciseName String             @map("exercise_name")
  series       Int
  reps         String
  rest         String?
  observations String?
  createdAt    DateTime           @default(now()) @map("created_at")
  block        SessionBlock       @relation(fields: [blockId], references: [id], onDelete: Cascade)
  tracking     ExerciseTracking[]

  @@map("block_exercises")
}

model ExerciseTracking {
  id         String        @id @default(uuid())
  exerciseId String        @map("exercise_id")
  userId     String        @map("user_id")
  kg         String?
  pse        String?
  rir        String?
  done       Boolean       @default(false)
  createdAt  DateTime      @default(now()) @map("created_at")
  exercise   BlockExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exercise_tracking")
}

model UserInvitation {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  invitedBy String    @map("invited_by")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")
  metadata  String?
  inviter   User      @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@map("user_invitations")
}
